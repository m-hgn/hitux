#!/bin/sh

# - main -

# entry point of the script,
# called at the end.
#
# everything in this script is
# wrapped in functions. the
# call to main is the only thing
# happening outside of a function

main()
{
    check_deps
    handle_options "$@"
    run_option "$@"
    exit
}



# - run_option -

# runs option according to usersn choice
# if option is invalid, prints help message
# and doesn't do anything

run_option()
{
    global_config

    case "$1" in
        -b | --bubble)
            bubble "$@"
            ;;
        -g | --greet)
            greet "$@"
            ;;
        -c | --clean)
            clean "$@"
            ;;
        *)
            usage
            ;;
    esac
}




# - configuration -

# see the colorscheme/formatting section
# after the config as well as `man tput`
# to understand colors and formatting.
#
# all functions named after options, ending in
# `_config()` are only to define colors as well
# as padding.
#
# to modify the actual information displayed,
# edit within the options corresponding function
# that does not end in `_config`

global_config()
{
    # global config applies to all options

    # colors
    beak_feet="$(echo "$fc7")"
    belly="$(echo "$fc1")"
    body="$(echo "$fc2")"
    eye="$(echo "$fc14")"
    text="$(echo "$reset")"
}


# config for greet option
greet_config()
{
    # colors
    bubble="$(echo "$fc8")"

    # since the bubble inverts colors,
    # the text should be a background color
    text="$(echo "$bc7")"

    # required padding
    # it is suggested to keep this
    user_padd="$(echo "$USER" | sed 's/./█/g')"
}


# config for clean option
clean_config()
{
    # colors
    border="$(echo "$fc8")"
    label="$(echo "$fc7")"
    text="$(echo "$fc1")"

    # circle colors to show palette
    ht0="$(echo "$fc2")"
    ht1="$(echo "$fc3")"
    ht2="$(echo "$fc5")"
    ht3="$(echo "$fc4")"
}


# config for bubble option
bubble_config()
{
    # colors
    bubble="$(echo "$fc8")"

    # since the bubble inverts colors,
    # the text should be a background color
    text="$(echo "$bc7")"

    # circle colors to show palette
    # since the bubble inverts colors,
    # the dots should be a background color
    ht0="$(echo "$bc2")"
    ht1="$(echo "$bc3")"
    ht2="$(echo "$bc5")"
    ht3="$(echo "$bc4")"
}


# - greet -
greet()
{
    greet_config
    cat <<EOF
    ${body}     ___${reset}
    ${body}    (${eye}·${beak_feet}<${eye}·${body})    ${bubble}🭢🭧🭒██████${user_padd}██🭌${reset}
    ${body}    / ${belly}_ ${body}\\____  ${bubble}🭢██${invert}${text}hi, $USER!${reset}${bubble}██${reset}
    ${body}   / ${belly}/ \\ ${body}\\--´   ${bubble}🭒█████${user_padd}██🭝${reset}
    ${body}  // ${belly}\\_/ ${body}/
    ${beak_feet}   _${body}\\/ \\/${beak_feet}_${reset}

EOF
}



# - clean -
clean()
{
    clean_config
    cat <<EOF
    ${body}     ___${reset}        ${border}╭──────────────────────╮
    ${body}    (${eye}·${beak_feet}<${eye}·${body})       ${border}│     ${label}os  ${ht0}⏺  ${text}pop!      ${border}│
    ${body}    / ${belly}_ ${body}\\____   ${border}│     ${label}wm  ${ht1}⏺  ${text}bspwm     ${border}│
    ${body}   / ${belly}/ \\ ${body}\\--´   ${border}│   ${label}term  ${ht2}⏺  ${text}kitty     ${border}│
    ${body}  // ${belly}\\_/ ${body}/      ${border}│  ${label}shell  ${ht3}⏺  ${text}zsh       ${border}│
    ${beak_feet}   _${body}\\/ \\/${beak_feet}_      ${border}╰──────────────────────╯

EOF
}



# - bubble -
bubble()
{
    bubble_config
    cat <<EOF
    ${body}     ___${reset}
    ${body}    (${eye}·${beak_feet}<${eye}·${body})    ${bubble}🭢🭧🭒████████████████████████🭌${reset}
    ${body}    / ${belly}_${body} \\____  ${bubble}🭢██${text}${invert}    ${b}os${reset}${bubble}${invert}  ${ht0}⏺${text}${bubble}  pop!      ${reset}${bubble}██${reset}
    ${body}   / ${belly}/ \\ ${body}\\--´   ${bubble}██${text}${invert}    ${b}wm${reset}${bubble}${invert}  ${ht1}⏺${text}${bubble}  bspwm     ${reset}${bubble}██${reset}
    ${body}  // ${belly}\\_/ ${body}/      ${bubble}██${text}${invert}  ${b}term${reset}${bubble}${invert}  ${ht2}⏺${text}${bubble}  kitty     ${reset}${bubble}██${reset}
    ${beak_feet}   _${body}\\/ \\/${beak_feet}_      ${bubble}██${text}${invert} ${b}shell${reset}${bubble}${invert}  ${ht3}⏺${text}${bubble}  zsh       ${reset}${bubble}██${reset}
                    ${bubble}🭒███████████████████████🭝${reset}
EOF
}


# - colorscheme/formatting -

# bold text
b="$(tput bold)"

# 16 foreground colors
fc0="$(tput setaf 0)"
fc1="$(tput setaf 1)"
fc2="$(tput setaf 2)"
fc3="$(tput setaf 3)"
fc4="$(tput setaf 4)"
fc5="$(tput setaf 5)"
fc6="$(tput setaf 6)"
fc7="$(tput setaf 7)"
fc8="$(tput setaf 8)"
fc9="$(tput setaf 9)"
fc10="$(tput setaf 10)"
fc11="$(tput setaf 11)"
fc12="$(tput setaf 12)"
fc13="$(tput setaf 13)"
fc14="$(tput setaf 14)"
fc15="$(tput setaf 15)"

# 16 background colors
bc0="$(tput setab 0)"
bc1="$(tput setab 1)"
bc2="$(tput setab 2)"
bc3="$(tput setab 3)"
bc4="$(tput setab 4)"
bc5="$(tput setab 5)"
bc6="$(tput setab 6)"
bc7="$(tput setab 7)"
bc8="$(tput setab 8)"
bc9="$(tput setab 9)"
bc10="$(tput setab 10)"
bc11="$(tput setab 11)"
bc12="$(tput setab 12)"
bc13="$(tput setab 13)"
bc14="$(tput setab 14)"
bc15="$(tput setab 15)"

# swap foreground/background
invert="$(tput rev)"

# reset formatting
reset="$(tput sgr0)"



# - check_deps -

# check for dependencies that the script
# requires to function.
#
# though these shouldn't be an issue

check_deps()
{
    if ! command -v tput 1>/dev/null ; then
        echo "$0: \`tput\` not found." 1>&2
        exit 1
    fi
    if ! command -v cat 1>/dev/null ; then
        echo "$0: \`cat\` not found." 1>&2
        exit 1
    fi
}



# - usage -

# print help message of script
# just for usage purposes, not for
# understanding how the script works.

usage()
{
    cat << EOF
usage: $0 [OPTION]

Have a sympathetic penguin greet you by name or have it display given
system information for you.

Read the source code for more information.

options:
   -b, --bubble    Fetch system information in speech bubble design
   -g, --greet     Have tux greet user by name
   -c, --clean     Fetch system information in clean design

   -h, --help      Display this message and exit
EOF
}



# - handle_options -

# handles number of options, script
# always takes exactly one option.

handle_options()
{
    if [ "$#" -ne 1 ] ; then
        echo "$0: invalid argument count. supply exactly one argument.\n" 1>&2
        usage
        exit 1
    fi
}




# call to main
main "$@"
